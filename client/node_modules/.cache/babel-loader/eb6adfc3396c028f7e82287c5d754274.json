{"ast":null,"code":"import _slicedToArray from \"/home/neetu/mindfire-app/mindfire-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/neetu/mindfire-app/mindfire-app/client/src/components/dashboard/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport request from '../../utils/request';\nimport Header from '../header/Header';\nimport SideNav from '../sideNav/SideNav';\nimport UserGraph from './Line';\nimport Index from './index';\nimport Grid from './Grid';\nimport CloudDoughnut from './Doughnut';\nimport Block from './Block';\nimport { getGraphData, getNetworkData } from '../../utils/graph';\n\nfunction Dashboard() {\n  let _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  let _useState3 = useState(-1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadStatus = _useState4[0],\n      setLoadStatus = _useState4[1];\n\n  let _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      x_axisState = _useState6[0],\n      set_x_axisState = _useState6[1];\n\n  let _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      y_axisState = _useState8[0],\n      set_y_axisState = _useState8[1];\n\n  let _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      networkXAxis = _useState10[0],\n      setNetworkXAxis = _useState10[1];\n\n  let _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      networkYAxis = _useState12[0],\n      setNetworkYAxis = _useState12[1];\n\n  let _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      doughNutNetwork = _useState14[0],\n      setdoughNutNetwork = _useState14[1];\n\n  let _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      doughNutDlt = _useState16[0],\n      setdoughNutDlt = _useState16[1];\n\n  let _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      doughNutNetworkCount = _useState18[0],\n      setdoughNutNetworkCount = _useState18[1];\n\n  let _useState19 = useState([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      pieCloud = _useState20[0],\n      setPieCloud = _useState20[1];\n\n  let _useState21 = useState([]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      pieCloudCount = _useState22[0],\n      setPieCloudCount = _useState22[1];\n\n  var dltArray = [];\n  var networkArray = [];\n  var cloudArray = [];\n  var cloudCountArray = [];\n  useEffect(() => {\n    request('GET', '/auth/getUserCount', {}).then(res => {\n      request('GET', '/auth/getnetworksCloud', {}).then(doughnutData => {\n        console.log('<vvvvvvvvdoughnutData.data.getNetworkCount', doughnutData);\n\n        if (res.data.success) {\n          setState(res.data);\n          let graphData = getGraphData(res.data.graph_count);\n          let networkData = getNetworkData(res.data.networkCount);\n          setdoughNutNetwork(doughnutData.data.getNetworkCount.data);\n          set_x_axisState(graphData.x_axis_data);\n          set_y_axisState(graphData.y_axis_data);\n          setNetworkXAxis(networkData.xAxisNetwork);\n          setNetworkYAxis(networkData.yAxisNetwork);\n          setLoadStatus(1);\n        }\n\n        if (doughnutData.data.getNetworkCount.success) {\n          console.log('MMMMMMcccccccccMMM', doughnutData.data.getNetworkCount);\n          doughnutData.data.getNetworkCount.data.map((countData, index) => {\n            dltArray.push(getDlt(countData.dlt));\n            networkArray.push(countData.network_count);\n          });\n          setdoughNutDlt([...dltArray]);\n          setdoughNutNetworkCount([...networkArray]);\n        }\n\n        if (doughnutData.data.getUserCloudCount.success) {\n          doughnutData.data.getUserCloudCount.data.map(item => {\n            debugger;\n\n            if (item.aws_count) {\n              cloudArray.push('AWS');\n              cloudCountArray.push(item.aws_count);\n            }\n\n            if (item.azure_count) {\n              cloudArray.push('Azure');\n              cloudCountArray.push(item.azure_count);\n            }\n\n            if (item.do_count) {\n              cloudArray.push('Digital Ocean');\n              cloudCountArray.push(item.do_count);\n            }\n\n            if (item.google_count) {\n              cloudArray.push('Google Cloud');\n              cloudCountArray.push(item.google_count);\n            }\n\n            if (item.ibm_count) {\n              cloudArray.push('IBM');\n              cloudCountArray.push(item.ibm_count);\n            }\n          });\n          setPieCloud([...cloudArray]);\n          setPieCloudCount([...cloudCountArray]);\n        }\n      });\n    });\n  }, [setState]); // console.log(\"doughNutCloud\",doughNutCloud, \"doughNutCloudCount\", doughNutCloudCount)\n  // console.log(\"doughNutDlt\",doughNutDlt, \"doughNutCloudCount\", doughNutCloudCount)\n\n  function getDlt(dlt) {\n    switch (dlt) {\n      case 1:\n        return 'Sawtooth';\n\n      case 2:\n        return 'Fabric';\n\n      case 3:\n        return 'Ethereum';\n\n      case 5:\n        return 'Credits';\n\n      case 6:\n        return 'Corda';\n\n      case 7:\n        return 'Fluree';\n\n      default:\n        return null;\n    }\n  }\n\n  console.log('nnnnnnnnnnn', doughNutDlt);\n  console.log('doughNutNetworkCount', doughNutNetworkCount);\n  return React.createElement(React.Fragment, null, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(SideNav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Block, {\n    state: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"loading-profile\",\n    style: {\n      display: loadStatus < 1 ? 'row' : 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: \"/static/images/pending-loader.svg\",\n    alt: \"Loading...\",\n    className: \"pending-loader\",\n    width: \"50\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    pieCloud: pieCloud,\n    pieCloudCount: pieCloudCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"col-xl-6 col-md-12 mt-3 \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card card-body border-0 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(UserGraph, {\n    y_axis_data: y_axisState,\n    x_axis_data: x_axisState,\n    networkXAxis: networkXAxis,\n    networkYAxis: networkYAxis,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"card card-body mt-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card border-0 col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(CloudDoughnut, {\n    doughNutDlt: doughNutDlt,\n    doughNutNetworkCount: doughNutNetworkCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })))))));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/neetu/mindfire-app/mindfire-app/client/src/components/dashboard/index.js"],"names":["React","useState","useEffect","request","Header","SideNav","UserGraph","Index","Grid","CloudDoughnut","Block","getGraphData","getNetworkData","Dashboard","state","setState","loadStatus","setLoadStatus","x_axisState","set_x_axisState","y_axisState","set_y_axisState","networkXAxis","setNetworkXAxis","networkYAxis","setNetworkYAxis","doughNutNetwork","setdoughNutNetwork","doughNutDlt","setdoughNutDlt","doughNutNetworkCount","setdoughNutNetworkCount","pieCloud","setPieCloud","pieCloudCount","setPieCloudCount","dltArray","networkArray","cloudArray","cloudCountArray","then","res","doughnutData","console","log","data","success","graphData","graph_count","networkData","networkCount","getNetworkCount","x_axis_data","y_axis_data","xAxisNetwork","yAxisNetwork","map","countData","index","push","getDlt","dlt","network_count","getUserCloudCount","item","aws_count","azure_count","do_count","google_count","ibm_count","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport request from '../../utils/request'\nimport Header from '../header/Header'\nimport SideNav from '../sideNav/SideNav'\nimport UserGraph from './Line'\nimport Index from './index'\nimport Grid from './Grid'\nimport CloudDoughnut from './Doughnut'\nimport Block from './Block'\nimport { getGraphData , getNetworkData} from '../../utils/graph';\n\nfunction Dashboard() {\n  let [state, setState] = useState([])\n  let [loadStatus, setLoadStatus] = useState(-1)\n  let [x_axisState, set_x_axisState] = useState([])\n  let [y_axisState, set_y_axisState] = useState([])\n  let [networkXAxis, setNetworkXAxis] = useState([])\n  let [networkYAxis, setNetworkYAxis] = useState([])\n  let [doughNutNetwork, setdoughNutNetwork] = useState([])\n  let [doughNutDlt , setdoughNutDlt] = useState([])\n  let [doughNutNetworkCount , setdoughNutNetworkCount] = useState([])\n  let [pieCloud, setPieCloud] = useState([])\n  let [pieCloudCount, setPieCloudCount] = useState([])\n  var dltArray =[]\n  var networkArray =[]\n\n  var cloudArray = []\n  var cloudCountArray = []\n  \n  useEffect(() => {\n    request('GET', '/auth/getUserCount', {}).then(res => {\n        request('GET', '/auth/getnetworksCloud', {}).then(doughnutData =>{\n          console.log('<vvvvvvvvdoughnutData.data.getNetworkCount', doughnutData)\n          if (res.data.success) {\n            setState(res.data);\n            let graphData = getGraphData(res.data.graph_count);\n            let networkData = getNetworkData(res.data.networkCount);\n            setdoughNutNetwork(doughnutData.data.getNetworkCount.data)\n            set_x_axisState(graphData.x_axis_data);\n            set_y_axisState(graphData.y_axis_data);\n            setNetworkXAxis(networkData.xAxisNetwork);\n            setNetworkYAxis(networkData.yAxisNetwork);\n            setLoadStatus(1);\n          }\n          if(doughnutData.data.getNetworkCount.success){\n            console.log('MMMMMMcccccccccMMM', doughnutData.data.getNetworkCount)\n            doughnutData.data.getNetworkCount.data.map((countData,index)=>{\n             dltArray.push(getDlt(countData.dlt))\n             networkArray.push(countData.network_count)\n           })\n           setdoughNutDlt([...dltArray])\n           setdoughNutNetworkCount([...networkArray])\n          }\n          if(doughnutData.data.getUserCloudCount.success) {\n            doughnutData.data.getUserCloudCount.data.map(item => {\n              debugger\n              if(item.aws_count){\n                cloudArray.push('AWS');\n                cloudCountArray.push(item.aws_count);\n              } \n              if(item.azure_count){\n                cloudArray.push('Azure');\n                cloudCountArray.push(item.azure_count);\n              }  \n              if(item.do_count){\n                cloudArray.push('Digital Ocean');\n                cloudCountArray.push(item.do_count);\n              } \n              if(item.google_count){\n                cloudArray.push('Google Cloud');\n                cloudCountArray.push(item.google_count);\n              }  \n              if(item.ibm_count){\n                cloudArray.push('IBM');\n                cloudCountArray.push(item.ibm_count);\n              }\n            })\n            setPieCloud([...cloudArray]);\n            setPieCloudCount([...cloudCountArray]);\n          }\n      })\n    })\n  }, [setState])\n\n  // console.log(\"doughNutCloud\",doughNutCloud, \"doughNutCloudCount\", doughNutCloudCount)\n  // console.log(\"doughNutDlt\",doughNutDlt, \"doughNutCloudCount\", doughNutCloudCount)\n\n   function getDlt(dlt){\n     switch(dlt){\n       case 1:\n       return 'Sawtooth';\n       case 2:\n       return 'Fabric';\n       case 3:\n       return 'Ethereum';\n       case 5:\n       return 'Credits';\n       case 6:\n       return 'Corda';\n       case 7:\n       return 'Fluree';\n       default: \n        return null;\n     }\n   }\n\n  console.log('nnnnnnnnnnn',doughNutDlt)\n  console.log('doughNutNetworkCount',doughNutNetworkCount)\n  return (<>\n    <Header />\n    <SideNav />\n    <main>\n      <Block state={state} />\n      <div className=\"loading-profile\" style={{ display: loadStatus < 1 ? 'row' : 'none' }}>\n        <img src=\"/static/images/pending-loader.svg\" alt=\"Loading...\" className=\"pending-loader\" width=\"50\" />\n      </div>\n      <div className=\"row\">\n          <Grid pieCloud={pieCloud} pieCloudCount={pieCloudCount} />\n          <div className=\"col-xl-6 col-md-12 mt-3 \">\n            <div className=\"card card-body border-0 col-md-12\">\n              <UserGraph y_axis_data={y_axisState} x_axis_data={x_axisState} networkXAxis={networkXAxis} networkYAxis={networkYAxis} />\n            </div>\n            <div className=\"card card-body mt-2\">\n              <div className=\"card border-0 col-md-12\">\n                <CloudDoughnut doughNutDlt={doughNutDlt} doughNutNetworkCount={doughNutNetworkCount}/>\n              </div>\n            </div>\n          </div>\n      </div>\n    </main>\n  </>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}