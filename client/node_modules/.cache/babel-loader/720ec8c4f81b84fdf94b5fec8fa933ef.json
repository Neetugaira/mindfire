{"ast":null,"code":"import _objectSpread from \"/home/neetu/mindfire-app/mindfire-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/neetu/mindfire-app/mindfire-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/neetu/mindfire-app/mindfire-app/client/src/components/modals/ResetPasswordModal.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { showResetModal } from '../../modalStore/modalActions';\nimport request from '../../utils/request';\nimport { toast } from 'react-toastify';\n\nfunction ResetPasswordModal({\n  isResetModalOpen,\n  showResetModal,\n  dispatch\n}) {\n  let _useState = useState({\n    password: '',\n    newPassword: '',\n    confirmPassword: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  let _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      err_password = _useState4[0],\n      setErr_password = _useState4[1];\n\n  let _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      err_newPassword = _useState6[0],\n      setErr_newPassword = _useState6[1];\n\n  let _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      err_confirmPassword = _useState8[0],\n      setErr_confirmPassword = _useState8[1];\n\n  let _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      passwordValid = _useState10[0],\n      setPasswordValid = _useState10[1];\n\n  const handleChange = event => {\n    setState(_objectSpread({}, state, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const validateForm = () => {\n    let isFormValid = true;\n    setPasswordValid(true);\n\n    if (state.password === '') {\n      isFormValid = false;\n      setErr_password(\"*Please enter your current Password.\");\n    }\n\n    if (state.newPassword === '') {\n      setPasswordValid(true);\n      isFormValid = false;\n      setErr_newPassword(\"*Please enter your new Password.\");\n    }\n\n    if (state.newPassword !== '') {\n      if (!state.newPassword.match(/^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).*$/)) {\n        setPasswordValid(false);\n        isFormValid = false;\n        setErr_newPassword(\"*Password Must contain at least one number one special character, one uppercase and lowercase letter and at least 8 or more characters.\");\n      }\n    }\n\n    if (state.confirmPassword === '') {\n      isFormValid = false;\n      setErr_confirmPassword(\"*Please enter your confirm Password.\");\n    }\n\n    if (state.confirmPassword !== '') {\n      if (state.newPassword !== state.confirmPassword) {\n        isFormValid = false;\n        setErr_confirmPassword(\"Re-Password must be same as the password field\");\n      }\n    }\n\n    return isFormValid;\n  };\n\n  const submit = () => {\n    const isValid = validateForm();\n\n    if (isValid) {\n      let formData = {\n        password: state.password,\n        newPassword: state.newPassword,\n        confirmPassword: state.confirmPassword\n      };\n      request('PUT', '/auth/changePassword', {\n        data: formData\n      }).then(res => {\n        if (res.data.success) {\n          toast.success(res.data.message);\n        } else {\n          toast.error(res.data.message);\n        }\n      });\n      showResetModal();\n    }\n  };\n\n  let visible = {\n    display: 'block'\n  };\n  let inVisible = {\n    display: 'none'\n  };\n  return React.createElement(\"div\", {\n    style: isResetModalOpen ? visible : inVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"bottom-to-top-slide\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"b__t-slide-component edit-profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"title-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Reset Password\"), React.createElement(\"div\", {\n    className: \"absolute-btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"minized-btn\",\n    title: \"Minimize\",\n    onClick: showResetModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa  fa-minus \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"close-btn\",\n    title: \"Close\",\n    onClick: showResetModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fa  fa-close \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"cover reset-password pt-3 \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"error-msg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \" flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Current Password \"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"password\",\n    name: \"password\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), state.password === '' ? React.createElement(\"span\", {\n    className: \"error-msg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, err_password) : null)), React.createElement(\"div\", {\n    className: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"New Password \"), React.createElement(\"input\", {\n    className: \"form-control\",\n    name: \"newPassword\",\n    type: \"password\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), state.newPassword === '' || !passwordValid ? React.createElement(\"span\", {\n    className: \"error-msg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, err_newPassword) : null)), React.createElement(\"div\", {\n    className: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Confirm password \"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"password\",\n    name: \"confirmPassword\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), state.confirmPassword === '' || state.newPassword !== state.confirmPassword ? React.createElement(\"span\", {\n    className: \"error-msg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, err_confirmPassword) : null))), React.createElement(\"div\", {\n    className: \"col-md-12 \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"fixes-button-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn blue-btn\",\n    type: \"submit\",\n    onClick: submit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \" Submit \")))))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    isResetModalOpen: state.modalReducer.resetModalState\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    showResetModal: () => dispatch(showResetModal(false)),\n    dispatch\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordModal);","map":{"version":3,"sources":["/home/neetu/mindfire-app/mindfire-app/client/src/components/modals/ResetPasswordModal.js"],"names":["React","useState","connect","showResetModal","request","toast","ResetPasswordModal","isResetModalOpen","dispatch","password","newPassword","confirmPassword","state","setState","err_password","setErr_password","err_newPassword","setErr_newPassword","err_confirmPassword","setErr_confirmPassword","passwordValid","setPasswordValid","handleChange","event","target","name","value","validateForm","isFormValid","match","submit","isValid","formData","data","then","res","success","message","error","visible","display","inVisible","mapStateToProps","modalReducer","resetModalState","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport {showResetModal} from '../../modalStore/modalActions';\nimport request from '../../utils/request';\nimport {toast} from 'react-toastify';\n\nfunction ResetPasswordModal({isResetModalOpen, showResetModal ,dispatch}) {\n  let [state, setState] = useState({ password: '', newPassword: '', confirmPassword: '' })\n  let [err_password, setErr_password] = useState('')\n  let [err_newPassword, setErr_newPassword] = useState('')\n  let [err_confirmPassword, setErr_confirmPassword] = useState('')\n  let [passwordValid, setPasswordValid] = useState(false);\n\n  const handleChange = event => {\n    setState({...state, [event.target.name]: event.target.value })\n  }\n\n  const validateForm = () => {\n    let isFormValid = true;\n    setPasswordValid(true);\n\n    if(state.password === '') {\n      isFormValid = false;\n     setErr_password(\"*Please enter your current Password.\");\n    } \n\n    if(state.newPassword === '') {\n      setPasswordValid(true);\n      isFormValid = false;\n     setErr_newPassword(\"*Please enter your new Password.\");\n    }  \n    if (state.newPassword !== '') {\n      if (!state.newPassword.match(/^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).*$/)) {\n        setPasswordValid(false);\n        isFormValid = false;\n        setErr_newPassword(\"*Password Must contain at least one number one special character, one uppercase and lowercase letter and at least 8 or more characters.\");\n      }\n    }\n\n    if(state.confirmPassword === '') {\n      isFormValid =false;\n      setErr_confirmPassword(\"*Please enter your confirm Password.\");\n    }  \n\n    if(state.confirmPassword !== '') {\n      if(state.newPassword !== state.confirmPassword) {\n        isFormValid =false;\n        setErr_confirmPassword(\"Re-Password must be same as the password field\");\n      }\n    }\n    return isFormValid;\n  }\n  const submit = () => {\n    const isValid = validateForm();\n    if(isValid) {\n      let formData = {\n        password: state.password,\n        newPassword: state.newPassword,\n        confirmPassword: state.confirmPassword\n      }\n      request('PUT', '/auth/changePassword', {\n        data: formData\n      }).then(res => {\n        if(res.data.success) {\n          toast.success(res.data.message);\n        } else {\n          toast.error(res.data.message);\n        }\n      })\n      showResetModal();\n    }\n  }\n  let visible = { display: 'block'};\n  let inVisible = { display: 'none'};\n  return (\n      <div style={isResetModalOpen ? visible : inVisible} >\n        <div className=\"bottom-to-top-slide\">\n        <div className=\"b__t-slide-component edit-profile\">\n          <div className=\"title-box\">\n            <h2>Reset Password</h2>\n            <div className=\"absolute-btn\">\n              <button className=\"minized-btn\" title=\"Minimize\" onClick={showResetModal}><i className=\"fa  fa-minus \" /></button>\n              <button className=\"close-btn\" title=\"Close\" onClick={showResetModal}><i className=\"fa  fa-close \" /></button>\n            </div>\n          </div>\n          <div className=\"cover reset-password pt-3 \">\n            <div >\n              <div className=\"error-msg\" />\n              <div className=\" flex\">\n                <div className=\"col-md-12\">\n                  <label>Current Password </label>\n                  <input className=\"form-control\" type=\"password\" name=\"password\" onChange={handleChange} />\n                  { state.password === '' ?\n                    <span className=\"error-msg\">{err_password}</span> : null}\n                </div>\n              </div>\n              <div className=\"flex\">\n                <div className=\"col-md-12\">\n                  <label>New Password </label>\n                  <input className=\"form-control\" name=\"newPassword\" type=\"password\" onChange={handleChange} />\n                  { state.newPassword === '' || !passwordValid ?\n                    <span className=\"error-msg\">{err_newPassword}</span> : null}\n                </div>\n              </div>\n              <div className=\"flex\">\n                <div className=\"col-md-12\">\n                  <label>Confirm password </label>\n                  <input className=\"form-control\" type=\"password\" name=\"confirmPassword\" onChange={handleChange} />\n                  { state.confirmPassword === '' || (state.newPassword !== state.confirmPassword)?\n                    <span className=\"error-msg\">{err_confirmPassword}</span> : null }\n                </div>\n              </div>\n            </div>\n              <div className=\"col-md-12 \">\n                <div className=\"fixes-button-bottom\">\n                  <button className=\"btn blue-btn\" type=\"submit\" onClick={submit}> Submit </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    isResetModalOpen: state.modalReducer.resetModalState\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n      showResetModal: () => dispatch(showResetModal(false)),\n      dispatch\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordModal)\n\n"]},"metadata":{},"sourceType":"module"}